#!/usr/bin/env python3

import json
import os
import signal
import subprocess
import sys
import time
import inquirer

###
# set wallpaper
#
# supported formats: jpeg, png, gif, pnm, tga, tiff, webp, bmp, farbfeld

# set the directory path where your wallpaper images are stored
WALLPAPER_ROOT_DIR = os.path.expanduser("~/.local/share/backgrounds")
STATE_DIR = os.path.expanduser("~/.local/state")
STATE_FILE = os.path.join(STATE_DIR, "wallpaper.state")
ALLOWED_EXTENSIONS = {".jpg", ".png", ".gif", ".pnm", ".tga", ".tiff", ".webp", ".bmp", ".farbfeld"}


def initialize_directories():
    os.makedirs(STATE_DIR, exist_ok=True)


def initialize_wallpaper_directory(category):
    wallpaper_dir = os.path.join(WALLPAPER_ROOT_DIR, category)
    os.makedirs(WALLPAPER_ROOT_DIR, exist_ok=True)
    return wallpaper_dir


def load_state():
    state = {
        "current_filename": "",
        "category": "",
        "filter": "",
    }

    if os.path.exists(STATE_FILE):
        try:
            with open(STATE_FILE, "r") as state_file:
                cached_state = json.load(state_file)
                state["current_filename"] = cached_state.get("current_filename", "")
                state["category"] = cached_state.get("category", "")
                state["filter"] = cached_state.get("filter", "")
        except Exception as e:
            print(f"Error loading state: {e}")

    return state


# detect environment
def detect_mode():
    if os.environ.get('DESKTOP_SESSION') == 'hyprland':
        return 'hyprland'
    elif os.environ.get('SWAYSOCK') is not None:
        return 'sway'
    else:
        return 'unknown'


# set wallpaper by filename
def set_wallpaper(state, wallpapers, file_path):
    try:
        new_index = wallpapers.index(file_path) if file_path in wallpapers else 0
        mode = detect_mode()
        print("setting wallpaper to {} (index {}, mode {})".format(file_path, new_index, mode))

        # hyprland
        if mode == 'hyprland':
            set_wallpaper_swww(file_path)
        elif mode == 'sway':
            set_wallpaper_swaybg(file_path)

        # Save the current filename to the state file
        with open(STATE_FILE, "w") as state_file:
            state["current_filename"] = file_path
            json.dump(state, state_file)
    except Exception as e:
        print(f"Error setting wallpaper: {e}")

# set wallpaper by index
def set_wallpaper_index(state, wallpapers, next_index):
    next_index = next_index % len(wallpapers)
    set_wallpaper(state, wallpapers, wallpapers[next_index])


# set wallpaper by filename
def set_wallpaper_swww(file_path):
    # set wallpaper
    command = [
        "swww", "img", file_path,
        "--resize", "fit",
        "--transition-bezier", ".43,1.19,1,.4",
        "--transition-type", "grow",
        "--transition-duration", "0.5",
        "--transition-fps", "60",
        "--invert-y"
    ]
    # hyprland specific: set the transition position to the cursor position
    try:
        cursor_pos = subprocess.check_output(["hyprctl", "cursorpos"], text=True).strip()
        if cursor_pos:
            command.extend(["--transition-pos", cursor_pos])
    except Exception as e:
        pass

    subprocess.run(command, check=True)

# set wallpaper by filename
def set_wallpaper_swaybg(file_path):
    try:
        # set wallpaper
        command = [
            "swaybg",
            "-i", file_path,
            "-m", "stretch", # stretch, fill, fit, center, tile
        ]
        pid = subprocess.Popen(command).pid

        time.sleep(0.5) # wait for swaybg to start
        kill_except_pid("swaybg", pid, time.time() - 0.5) # kill any existing swaybg processes
    except Exception as e:
        print(f"Error setting wallpaper: {e}")


# kill processes, exclude pid
def kill_except_pid(arg, exclude_pid, older_than):
    for pid in [pid for pid in os.listdir('/proc') if pid.isdigit()]:
        try:
            pid_path = os.path.join('/proc', pid)
            cmdline = open(os.path.join('/proc', pid, 'cmdline'), 'rb').read().decode('utf-8')
            ctime = os.path.getctime(pid_path)

            if arg in cmdline and int(pid) != exclude_pid and ctime <= older_than:
                os.kill(int(pid), signal.SIGTERM)
        except (IOError, ProcessLookupError):
            pass


def get_wallpapers(wallpaper_dir):
    wallpapers = [os.path.join(wallpaper_dir, f) for f in os.listdir(wallpaper_dir)]
    filtered_wallpapers = []

    for file_path in wallpapers:
        if os.path.isfile(file_path) and os.path.splitext(file_path)[1].lower() in ALLOWED_EXTENSIONS:
            filtered_wallpapers.append(file_path)

    return filtered_wallpapers


# main script
def main():
    """
    The main function of the script.
    """
    if len(sys.argv) < 2:
        print("Usage: {} {{set|next|prev}} [current_wallpaper]".format(sys.argv[0]))
        sys.exit(1)

    initialize_directories()
    state = load_state()
    wallpaper_dir = initialize_wallpaper_directory(state["category"])

    # create a list of all image files in the specified directory
    wallpapers = get_wallpapers(wallpaper_dir)

    # cli commands
    mode = sys.argv[1]
    if mode == "set":
        # set wallpaper
        if len(sys.argv) > 2:
            set_wallpaper(state, wallpapers, os.path.join(wallpaper_dir, sys.argv[2]))
        else:
            set_wallpaper(state, wallpapers, os.path.join(wallpaper_dir, wallpapers[0]))
    elif mode == "next":
        # next wallpaper
        current_index = wallpapers.index(state["current_filename"]) if state["current_filename"] in wallpapers else 0
        set_wallpaper_index(state, wallpapers, current_index + 1)
    elif mode == "prev":
        # previous wallpaper
        current_index = wallpapers.index(state["current_filename"]) if state["current_filename"] in wallpapers else 0
        set_wallpaper_index(state, wallpapers, current_index - 1)
    elif mode == "restore":
        # current wallpaper
        current_index = wallpapers.index(state["current_filename"]) if state["current_filename"] in wallpapers else 0
        set_wallpaper_index(state, wallpapers, current_index)
    elif mode == "category":
        wallpaper_directories = [d for d in os.listdir(WALLPAPER_ROOT_DIR) if os.path.isdir(os.path.join(WALLPAPER_ROOT_DIR, d))]
        questions = [
            inquirer.List('wallpaper_dir',
                message="Theme:",
                choices=wallpaper_directories,
            ),
        ]
        answers = inquirer.prompt(questions)
        state["category"] = answers['wallpaper_dir']

        # reload wallpapers
        wallpaper_dir = initialize_wallpaper_directory(state["category"])
        wallpapers = get_wallpapers(wallpaper_dir)
        
        # current wallpaper
        current_index = wallpapers.index(state["current_filename"]) if state["current_filename"] in wallpapers else 0
        set_wallpaper_index(state, wallpapers, current_index)

        # Save the current filename to the state file
        with open(STATE_FILE, "w") as state_file:
            json.dump(state, state_file)
    elif mode == "state":
        print("{}".format(json.dumps(state, indent=2)))
    else:
        print("Usage: {} {{set|next|prev}} [file]".format(sys.argv[0]))
        print("Using WALLPAPER_DIR = ", wallpaper_dir)
        sys.exit(1)


if __name__ == "__main__":
    main()
