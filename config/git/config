# vim: set ft=gitconfig noet:

[include]
  # theme (git-delta pager)
  path = ~/.config/git/delta-themes/theme.gitconfig

[init]
  defaultBranch = main

[core]
  editor       = nvim
  pager        = delta
  autocrlf     = input
  eol          = lf
  excludesfile = ~/.config/git/gitignore
  preloadindex = true
  fscache      = true
  #fsmonitor    = true # file-system watcher
  hooksPath    = ~/.config/git/hooks

[commit]
  gpgsign = true

[tag]
  gpgsign = true
  forcesignannotated = true

[pull]
  rebase = true # rebase instead of merge when pulling

[rebase]
  autoStash = true # stash changes before rebasing
  updateRefs = true # update references on rebased commits

[fetch]
  prune = true # remove remote branches that no longer exist on the server
  writeCommitGraph = true # incrementally update the commit graph

[alias]
  s = status --short --branch
  sw = !sh -c 'git stash && git checkout \"$0\"'
  di = diff
  df = diff --staged
  fa = fetch -a
  wa = worktree add
  wr = worktree remove
  wl = worktree list
  sl = stash list
  sp = stash pop
  ss = stash save
  # smart blame (copy/move detection)
  bl = blame -w -C -C -C
  # add executable file
  addx = !sh -c 'git add $0; git update-index --chmod=+x $0'
  # history
  hr = log --graph --decorate \
		--pretty=format:'%C(red)%h%Creset  %C(auto)%d%Creset %s  %Cgreen(%ar) %C(bold blue)<%an>%Creset' \
		--abbrev-commit --date=short --date-order
  ha = log --graph --decorate \
		--pretty=format:'%C(red)%h%Creset  %C(auto)%d%Creset %s  %Cgreen(%cD) %C(bold blue)<%an>%Creset' \
		--abbrev-commit --date=short --date-order
  # list all tags
  t = log --no-walk --tags --pretty=format:'%C(auto)%aI  %H  %d' --decorate=full
  # shallow clone
  shallow-clone = clone --filter=blob:none
  # unstage everything
  unstage = reset HEAD --
  # discord everything
  discard = checkout --
  # list conflicts
  list-conflicts = diff --name-only --diff-filter=U
  # summary
  summary = !onefetch --no-bots
  # list config
  list-config = !git config --list --show-origin
  # commit with timestamp - git commit-at "feat: hello world" "2024-01-01 00:00:00 +0100"
  commit-at = "!f() { GIT_COMMITTER_DATE=\"$2\" git commit --allow-empty -m \"$1\" --date=\"$2\"; }; f"
  # commit with author - git commit-by "feat: hello world" "John Doe" "john@doe"
  commit-by = "!f() { GIT_COMMITTER_NAME=\"$2\" GIT_COMMITTER_EMAIL=\"$3\" git commit --allow-empty -m \"$1\"; }; f"
  # commit with author and timestamp - git commit-custom "feat: hello world" "John Doe" "john@doe" "2024-01-01 00:00:00 +0100"
  commit-custom = "!f() { GIT_COMMITTER_NAME=\"$2\" GIT_COMMITTER_EMAIL=\"$3\" GIT_COMMITTER_DATE=\"$4\" git commit --allow-empty -m \"$1\" --date=\"$4\"; }; f"

[interactive]
  diffFilter = delta --color-only
[add.interactive]
    useBuiltin = false # required for git 2.37.0

[delta]
  features = current-theme
  navigate = true  # use n and N to move between diff sections
  side-by-side = true # side by side view
  light = false

[merge]
  conflictstyle = diff3

[diff]
  colorMoved = default

  # smarter diff on splits around blank lines (git 2.9.0+)
	compactionHeuristic = true

[gc]
  auto = 256

[stash]
	# show diff when running 'git stash show <SHA>'.
	showPatch = true

[log]
	mailmap = true

[rerere]
  enabled = true # enable rerere (reuse recorded conflict resolutions)

[branch]
  sort = -committerdate # sort branches by committer date

[submodule]
	# update submodules recursively when pulling changes
	recurse = true

[color]
	status = auto
	diff = auto
	branch = auto
	interactive = auto
	ui = auto

[color "decorate"]
	HEAD = cyan
	branch = yellow
	tag = magenta

[color "status"]
	branch = cyan
	added = green
	changed = red
	nobranch = red bold
	untracked = yellow

[color "diff-highlight"]
	oldNormal = red
	oldHighlight = red bold 52
	newNormal = green
	newHighlight = green bold 22

[color "diff"]
	frag = magenta bold
	commit = yellow
	old = red
	new = green
	whitespace = red reverse
	meta = yellow bold

[format]
	# based on 'fuller' format, but adds color customization
	pretty = "\
%C(bold)commit%C(reset)  %C(yellow)%H%C(auto)%d%n\
%C(bold)parent%C(reset)  %C(#adb5bd)%P%C(auto)%n\
%C(bold)Author:    %C(reset) %C(blue bold)%an <%ae>%n\
%C(bold)AuthorDate:%C(reset) %C(green)%ai (%ar)%C(reset)%n\
%C(bold)Commit:    %C(reset) %C(blue bold)%cn <%ce>%n\
%C(bold)CommitDate:%C(reset) %C(green)%ci (%cr)%C(reset)%n\
%w(0,0,4)%+B"

[credential]
  helper = 'store'

# auth with gh cli
[credential "https://github.com"]
	helper =
	helper = !$HOME/.local/bin/gh auth git-credential
[credential "https://gist.github.com"]
	helper =
	helper = !$HOME/.local/bin/gh auth git-credential

[filter "lfs"]
	# Generated by `git lfs install`
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

[include]
  # user config
  path = ~/.config/git/user
